[tool.poetry]
name = "dsws-client"
version = "0.1.0"
description = "Python client for the Datastream Web Service API (DSWS)"
authors = ["ljnsn <info@ljnsn.com>"]
license = "MIT"
readme = "README.md"
packages = [{include = "dsws_client"}]

[tool.commitizen]
name = "cz_gitmoji"
version = "0.1.0"
version_files = ["pyproject.toml:^version"]
tag_format = "v$version"
bump_message = "ðŸ”– bump(release): v$current_version â†’ v$new_version"
update_changelog_on_bump = true

[tool.poetry.dependencies]
python = "^3.8"
requests = "^2.29.0"
attrs = "^23.1.0"
commitizen = ">=2.42.0,<3.0.0"
python-dotenv = "^1.0.0"
cz-conventional-gitmoji = "^0.1.3"

[tool.poetry.group.dev.dependencies]
pytest = "^7.3.1"
mypy = "^1.2.0"
ruff = "^0.0.263"
black = "^23.3.0"
pytest-cov = "^4.0.0"
types-requests = "^2.29.0.0"

[tool.black]
line-length = 88
target-version = ["py38"]

[tool.coverage.run]
branch = true
command_line = "--module pytest"
data_file = "reports/.coverage"
source = ["dsws_client"]

[tool.coverage.report]
fail_under = 50
precision = 1
show_missing = true
skip_covered = true

[tool.coverage.xml]
output = "reports/coverage.xml"

[tool.mypy]
junit_xml = "reports/mypy.xml"
plugins = "pydantic.mypy"
strict = true
disallow_subclassing_any = false
disallow_untyped_decorators = false
ignore_missing_imports = true
pretty = true
show_column_numbers = true
show_error_codes = true
show_error_context = true
warn_unreachable = true
namespace_packages = true
explicit_package_bases = true

[tool.ruff]
select = ["A", "ANN", "ARG", "B", "BLE", "C4", "D", "DTZ", "E", "EM", "ERA", "F", "FBT", "I", "ICN", "ISC", "N", "PGH", "PIE", "PLC", "PLE", "PLR", "PLW", "PT", "Q", "RET", "RUF", "S", "SIM", "T10", "T20", "TID", "UP", "W", "YTT"]
ignore = [
  # Missing docstring in public module
  "D100",
  # Missing docstring in `__init__`
  "D107",
  # Multi-line docstring summary should start at the first line
  "D212",
  # Class attribute `id` is shadowing a python builtin
  "A003",
  # Missing type annotation for `self` in method
  "ANN101",
  # Missing type annotation for `cls` in classmethod
  "ANN102",
  # Dynamically typed expressions (typing.Any) are disallowed in `*args`
  "ANN401",
  # Exception must not use a string literal, assign to variable first
  "EM101",
  # Boolean positional arg in function definition
  "FBT001",
  # Boolean default value in function definition
  "FBT002",
  # Boolean positional value in function call
  "FBT003",
]
fix = true
unfixable = ["ERA001", "F401", "F841"]
target-version = "py38"
src = ["dsws_client", "tests"]

[tool.ruff.per-file-ignores]
"test_*.py" = [
  # positional boolean args
  "FBT001",
  # usage of `assert` in tests
  "S101",
  # Magic value used in comparison, consider replacing 2 with a constant variable
  "PLR2004",
  # Standard pseudo-random generators are not suitable for cryptographic purposes
  "S311",
]

[tool.ruff.pydocstyle]
convention = "google"

[tool.ruff.flake8-tidy-imports]
# Disallow all relative imports.
ban-relative-imports = "all"

[tool.ruff.pep8-naming]
# Allow Pydantic's `@validator` decorator to trigger class method treatment.
classmethod-decorators = ["classmethod", "pydantic.validator"]

[tool.pytest.ini_options]
addopts = """--color=yes --doctest-modules --exitfirst --failed-first \
  --strict-markers --strict-config --verbosity=2 \
  --junitxml=reports/pytest.xml"""
filterwarnings = ["ignore::DeprecationWarning", "ignore::ResourceWarning"]
testpaths = ["dsws_client", "tests"]

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

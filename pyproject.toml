[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.hatch.build.targets.wheel]
packages = ["dsws_client"]

[tool.hatch.build.targets.sdist]
include = ["dsws_client", "pyproject.toml", "README.md"]

[project]
name = "dsws-client"
version = "1.1.3"
description = "Python client for the Datastream Web Service API (DSWS)"
readme = "README.md"
authors = [{ name = "ljnsn", email = "info@ljnsn.com" }]
license = "MIT"
requires-python = ">=3.8,<4.0"
dependencies = [
  "attrs>=23.1.0",
  "httpx>=0.27.0",
  "msgspec>=0.18.6",
  "python-dotenv>=1.0.0",
  "setuptools; python_version >= \"3.12\"",
  "typing-extensions>=4.11.0; python_version < \"3.10\"",
]

[tool.uv]
dev-dependencies = [
  "commitizen>=2.42.0",
  "coverage>=7.6.1",
  "cz-conventional-gitmoji>=0.1.3",
  "ipdb>=0.13.13",
  "ipython>=8.12.3",
  "mypy>=1.2.0",
  "pre-commit>=2.0",
  "pytest-cov>=4",
  "pytest>=7.3.1",
  "ruff>=0.0.269",
  "types-requests>=2.29.0.0",
]

[tool.commitizen]
name = "cz_gitmoji"
version_provider = "pep621"
tag_format = "v$version"
bump_message = "ðŸ”– bump(release): v$current_version â†’ v$new_version"
update_changelog_on_bump = true
annotated_tag = true
allowed_prefixes = ["Squash", "Merge", "Revert"]
pre_bump_hooks = ["uv lock --upgrade-package dsws-client"]

[tool.ruff]
fix = true
target-version = "py38"
src = ["dsws_client", "tests"]
line-length = 88

[tool.ruff.format]
line-ending = "lf"
indent-style = "space"

[tool.ruff.lint]
logger-objects = ["loguru"]
select = [
  "A",
  "ANN",
  "ARG",
  "B",
  "BLE",
  "C4",
  "D",
  "DTZ",
  "E",
  "EM",
  "ERA",
  "F",
  "FBT",
  "I",
  "ICN",
  "ISC",
  "N",
  "PGH",
  "PIE",
  "PLC",
  "PLE",
  "PLR",
  "PLW",
  "PT",
  "Q",
  "RET",
  "RUF",
  "S",
  "SIM",
  "T10",
  "T20",
  "TID",
  "UP",
  "W",
  "YTT",
]
ignore = [
  # Missing docstring in public module
  "D100",
  # Missing docstring in `__init__`
  "D107",
  # Multi-line docstring summary should start at the first line
  "D212",
  # Class attribute `id` is shadowing a python builtin
  "A003",
  # Missing type annotation for `self` in method
  "ANN101",
  # Missing type annotation for `cls` in classmethod
  "ANN102",
  # Dynamically typed expressions (typing.Any) are disallowed in `*args`
  "ANN401",
  # Exception must not use a string literal, assign to variable first
  "EM101",
  # Missing authot in TODO
  "TD002",
  # Missing issue link on the line following this TODO
  "TD003",
  # Line contains TODO
  "FIX002",
  # Avoid specifying long messages outside the exception class
  "TRY003",
  # Move application import into a type-checking block
  "TCH001",
  # Move third-party import into a type-checking block
  "TCH002",
  # Move standard library import into a type-checking block
  "TCH003",
  # Invalid TODO tag
  "TD001",
  # Line contains FIXME, consider resolving the issue
  "FIX001",
  #############################################################################
  # Rules conflicting with `ruff format`
  # https://docs.astral.sh/ruff/formatter/#conflicting-lint-rules
  #############################################################################
  # Checks for indentation that uses tabs.
  "W191",
  # Checks for indentation with a non-multiple of 4 spaces.
  "E111",
  # Checks for indentation of comments with a non-multiple of 4 spaces.
  "E114",
  # Checks for over-indented code.
  "E117",
  # Line length violation
  "E501",
  # Checks for docstrings that are indented with tabs.
  "D206",
  # Checks for docstrings that use '''triple single quotes''' instead of """triple double quotes"""
  "D300",
  # Make sure that inline strings are quoted consistently.
  "Q000",
  # Make sure that multiline strings are quoted consistently.
  "Q001",
  # Make sure that docstrings are quoted consistently.
  "Q002",
  # Checks for strings that include escaped quotes
  "Q003",
  # Missing trailing comma
  # "COM812",
  # Prohibited trailing comma
  "COM819",
  # Single line implicit string concatenation
  "ISC001",
  # Multiline implicit string concatenation
  "ISC002",
]
unfixable = ["ERA001", "F401", "F841"]

[tool.ruff.lint.per-file-ignores]
"test_*.py" = [
  # The use of `datetime.datetime()` without `tzinfo` argument is not allowed
  "DTZ001",
  # positional boolean args
  "FBT001",
  # part of an implicit namespace package
  "INP001",
  # usage of `assert` in tests
  "S101",
  # standard pseudo-random generators are not suitable for cryptographic purposes
  "S311",
  # magic value used in comarison
  "PLR2004",
  # private member accessed
  "SLF001",
]
"scripts/**/*.py" = [
  # part of implicit namespace package
  "INP001",
]

[tool.ruff.lint.isort]
known-first-party = ["", "tests"]

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.ruff.lint.flake8-tidy-imports]
ban-relative-imports = "all"

[tool.ruff.lint.pep8-naming]
classmethod-decorators = ["classmethod"]

[tool.mypy]
namespace_packages = true
explicit_package_bases = true
junit_xml = "reports/mypy.xml"
strict = true
disallow_subclassing_any = false
disallow_untyped_decorators = false
ignore_missing_imports = true
pretty = false
show_column_numbers = true
show_error_codes = true
show_error_context = true
warn_unreachable = true

[tool.pytest.ini_options]
addopts = """--color=yes --doctest-modules --exitfirst --failed-first \
  --strict-markers --strict-config --verbosity=2 \
  --junitxml=reports/pytest.xml"""
filterwarnings = ["error"]
testpaths = ["tests"]

[tool.coverage.run]
branch = true
command_line = "--module pytest"
data_file = "reports/.coverage"
source = ["dsws_client"]

[tool.coverage.report]
fail_under = 50
precision = 1
show_missing = true
skip_covered = true

[tool.coverage.xml]
output = "reports/coverage.xml"
